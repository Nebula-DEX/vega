// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/api (interfaces: VolumeDiscountService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "code.vegaprotocol.io/vega/datanode/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockVolumeDiscountService is a mock of VolumeDiscountService interface.
type MockVolumeDiscountService struct {
	ctrl     *gomock.Controller
	recorder *MockVolumeDiscountServiceMockRecorder
}

// MockVolumeDiscountServiceMockRecorder is the mock recorder for MockVolumeDiscountService.
type MockVolumeDiscountServiceMockRecorder struct {
	mock *MockVolumeDiscountService
}

// NewMockVolumeDiscountService creates a new mock instance.
func NewMockVolumeDiscountService(ctrl *gomock.Controller) *MockVolumeDiscountService {
	mock := &MockVolumeDiscountService{ctrl: ctrl}
	mock.recorder = &MockVolumeDiscountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVolumeDiscountService) EXPECT() *MockVolumeDiscountServiceMockRecorder {
	return m.recorder
}

// Stats mocks base method.
func (m *MockVolumeDiscountService) Stats(arg0 context.Context, arg1 *uint64, arg2 *string, arg3 entities.CursorPagination) ([]entities.FlattenVolumeDiscountStats, entities.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stats", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entities.FlattenVolumeDiscountStats)
	ret1, _ := ret[1].(entities.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Stats indicates an expected call of Stats.
func (mr *MockVolumeDiscountServiceMockRecorder) Stats(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stats", reflect.TypeOf((*MockVolumeDiscountService)(nil).Stats), arg0, arg1, arg2, arg3)
}
