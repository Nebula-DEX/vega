// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/datanode/api (interfaces: AMMService)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "code.vegaprotocol.io/vega/datanode/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockAMMService is a mock of AMMService interface.
type MockAMMService struct {
	ctrl     *gomock.Controller
	recorder *MockAMMServiceMockRecorder
}

// MockAMMServiceMockRecorder is the mock recorder for MockAMMService.
type MockAMMServiceMockRecorder struct {
	mock *MockAMMService
}

// NewMockAMMService creates a new mock instance.
func NewMockAMMService(ctrl *gomock.Controller) *MockAMMService {
	mock := &MockAMMService{ctrl: ctrl}
	mock.recorder = &MockAMMServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAMMService) EXPECT() *MockAMMServiceMockRecorder {
	return m.recorder
}

// GetSubKeysForParties mocks base method.
func (m *MockAMMService) GetSubKeysForParties(arg0 context.Context, arg1, arg2 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSubKeysForParties", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSubKeysForParties indicates an expected call of GetSubKeysForParties.
func (mr *MockAMMServiceMockRecorder) GetSubKeysForParties(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSubKeysForParties", reflect.TypeOf((*MockAMMService)(nil).GetSubKeysForParties), arg0, arg1, arg2)
}

// ListAll mocks base method.
func (m *MockAMMService) ListAll(arg0 context.Context, arg1 bool, arg2 entities.CursorPagination) ([]entities.AMMPool, entities.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entities.AMMPool)
	ret1, _ := ret[1].(entities.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListAll indicates an expected call of ListAll.
func (mr *MockAMMServiceMockRecorder) ListAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockAMMService)(nil).ListAll), arg0, arg1, arg2)
}

// ListByMarket mocks base method.
func (m *MockAMMService) ListByMarket(arg0 context.Context, arg1 string, arg2 bool, arg3 entities.CursorPagination) ([]entities.AMMPool, entities.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByMarket", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entities.AMMPool)
	ret1, _ := ret[1].(entities.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByMarket indicates an expected call of ListByMarket.
func (mr *MockAMMServiceMockRecorder) ListByMarket(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByMarket", reflect.TypeOf((*MockAMMService)(nil).ListByMarket), arg0, arg1, arg2, arg3)
}

// ListByParty mocks base method.
func (m *MockAMMService) ListByParty(arg0 context.Context, arg1 string, arg2 bool, arg3 entities.CursorPagination) ([]entities.AMMPool, entities.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByParty", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entities.AMMPool)
	ret1, _ := ret[1].(entities.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByParty indicates an expected call of ListByParty.
func (mr *MockAMMServiceMockRecorder) ListByParty(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByParty", reflect.TypeOf((*MockAMMService)(nil).ListByParty), arg0, arg1, arg2, arg3)
}

// ListByPartyMarketStatus mocks base method.
func (m *MockAMMService) ListByPartyMarketStatus(arg0 context.Context, arg1, arg2 *string, arg3 *entities.AMMStatus, arg4 bool, arg5 entities.CursorPagination) ([]entities.AMMPool, entities.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPartyMarketStatus", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]entities.AMMPool)
	ret1, _ := ret[1].(entities.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByPartyMarketStatus indicates an expected call of ListByPartyMarketStatus.
func (mr *MockAMMServiceMockRecorder) ListByPartyMarketStatus(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPartyMarketStatus", reflect.TypeOf((*MockAMMService)(nil).ListByPartyMarketStatus), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListByPool mocks base method.
func (m *MockAMMService) ListByPool(arg0 context.Context, arg1 string, arg2 bool, arg3 entities.CursorPagination) ([]entities.AMMPool, entities.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByPool", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entities.AMMPool)
	ret1, _ := ret[1].(entities.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByPool indicates an expected call of ListByPool.
func (mr *MockAMMServiceMockRecorder) ListByPool(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByPool", reflect.TypeOf((*MockAMMService)(nil).ListByPool), arg0, arg1, arg2, arg3)
}

// ListByStatus mocks base method.
func (m *MockAMMService) ListByStatus(arg0 context.Context, arg1 entities.AMMStatus, arg2 entities.CursorPagination) ([]entities.AMMPool, entities.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].([]entities.AMMPool)
	ret1, _ := ret[1].(entities.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListByStatus indicates an expected call of ListByStatus.
func (mr *MockAMMServiceMockRecorder) ListByStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByStatus", reflect.TypeOf((*MockAMMService)(nil).ListByStatus), arg0, arg1, arg2)
}

// ListBySubAccount mocks base method.
func (m *MockAMMService) ListBySubAccount(arg0 context.Context, arg1 string, arg2 bool, arg3 entities.CursorPagination) ([]entities.AMMPool, entities.PageInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBySubAccount", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]entities.AMMPool)
	ret1, _ := ret[1].(entities.PageInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBySubAccount indicates an expected call of ListBySubAccount.
func (mr *MockAMMServiceMockRecorder) ListBySubAccount(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBySubAccount", reflect.TypeOf((*MockAMMService)(nil).ListBySubAccount), arg0, arg1, arg2, arg3)
}
