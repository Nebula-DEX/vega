// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/volumerebate (interfaces: Broker,MarketActivityTracker)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	events "code.vegaprotocol.io/vega/core/events"
	num "code.vegaprotocol.io/vega/libs/num"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockBroker is a mock of Broker interface.
type MockBroker struct {
	ctrl     *gomock.Controller
	recorder *MockBrokerMockRecorder
}

// MockBrokerMockRecorder is the mock recorder for MockBroker.
type MockBrokerMockRecorder struct {
	mock *MockBroker
}

// NewMockBroker creates a new mock instance.
func NewMockBroker(ctrl *gomock.Controller) *MockBroker {
	mock := &MockBroker{ctrl: ctrl}
	mock.recorder = &MockBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBroker) EXPECT() *MockBrokerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockBroker) Send(arg0 events.Event) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Send", arg0)
}

// Send indicates an expected call of Send.
func (mr *MockBrokerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBroker)(nil).Send), arg0)
}

// MockMarketActivityTracker is a mock of MarketActivityTracker interface.
type MockMarketActivityTracker struct {
	ctrl     *gomock.Controller
	recorder *MockMarketActivityTrackerMockRecorder
}

// MockMarketActivityTrackerMockRecorder is the mock recorder for MockMarketActivityTracker.
type MockMarketActivityTrackerMockRecorder struct {
	mock *MockMarketActivityTracker
}

// NewMockMarketActivityTracker creates a new mock instance.
func NewMockMarketActivityTracker(ctrl *gomock.Controller) *MockMarketActivityTracker {
	mock := &MockMarketActivityTracker{ctrl: ctrl}
	mock.recorder = &MockMarketActivityTrackerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMarketActivityTracker) EXPECT() *MockMarketActivityTrackerMockRecorder {
	return m.recorder
}

// CalculateTotalMakerContributionInQuantum mocks base method.
func (m *MockMarketActivityTracker) CalculateTotalMakerContributionInQuantum(arg0 int) (map[string]*num.Uint, map[string]decimal.Decimal) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateTotalMakerContributionInQuantum", arg0)
	ret0, _ := ret[0].(map[string]*num.Uint)
	ret1, _ := ret[1].(map[string]decimal.Decimal)
	return ret0, ret1
}

// CalculateTotalMakerContributionInQuantum indicates an expected call of CalculateTotalMakerContributionInQuantum.
func (mr *MockMarketActivityTrackerMockRecorder) CalculateTotalMakerContributionInQuantum(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateTotalMakerContributionInQuantum", reflect.TypeOf((*MockMarketActivityTracker)(nil).CalculateTotalMakerContributionInQuantum), arg0)
}
