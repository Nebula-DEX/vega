// Code generated by MockGen. DO NOT EDIT.
// Source: code.vegaprotocol.io/vega/core/vesting (interfaces: ActivityStreakVestingMultiplier,Assets,Parties,StakeAccounting,Time)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	assets "code.vegaprotocol.io/vega/core/assets"
	types "code.vegaprotocol.io/vega/core/types"
	gomock "github.com/golang/mock/gomock"
	decimal "github.com/shopspring/decimal"
)

// MockActivityStreakVestingMultiplier is a mock of ActivityStreakVestingMultiplier interface.
type MockActivityStreakVestingMultiplier struct {
	ctrl     *gomock.Controller
	recorder *MockActivityStreakVestingMultiplierMockRecorder
}

// MockActivityStreakVestingMultiplierMockRecorder is the mock recorder for MockActivityStreakVestingMultiplier.
type MockActivityStreakVestingMultiplierMockRecorder struct {
	mock *MockActivityStreakVestingMultiplier
}

// NewMockActivityStreakVestingMultiplier creates a new mock instance.
func NewMockActivityStreakVestingMultiplier(ctrl *gomock.Controller) *MockActivityStreakVestingMultiplier {
	mock := &MockActivityStreakVestingMultiplier{ctrl: ctrl}
	mock.recorder = &MockActivityStreakVestingMultiplierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActivityStreakVestingMultiplier) EXPECT() *MockActivityStreakVestingMultiplierMockRecorder {
	return m.recorder
}

// GetRewardsVestingMultiplier mocks base method.
func (m *MockActivityStreakVestingMultiplier) GetRewardsVestingMultiplier(arg0 string) decimal.Decimal {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRewardsVestingMultiplier", arg0)
	ret0, _ := ret[0].(decimal.Decimal)
	return ret0
}

// GetRewardsVestingMultiplier indicates an expected call of GetRewardsVestingMultiplier.
func (mr *MockActivityStreakVestingMultiplierMockRecorder) GetRewardsVestingMultiplier(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRewardsVestingMultiplier", reflect.TypeOf((*MockActivityStreakVestingMultiplier)(nil).GetRewardsVestingMultiplier), arg0)
}

// MockAssets is a mock of Assets interface.
type MockAssets struct {
	ctrl     *gomock.Controller
	recorder *MockAssetsMockRecorder
}

// MockAssetsMockRecorder is the mock recorder for MockAssets.
type MockAssetsMockRecorder struct {
	mock *MockAssets
}

// NewMockAssets creates a new mock instance.
func NewMockAssets(ctrl *gomock.Controller) *MockAssets {
	mock := &MockAssets{ctrl: ctrl}
	mock.recorder = &MockAssetsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAssets) EXPECT() *MockAssetsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockAssets) Get(arg0 string) (*assets.Asset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*assets.Asset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockAssetsMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockAssets)(nil).Get), arg0)
}

// MockParties is a mock of Parties interface.
type MockParties struct {
	ctrl     *gomock.Controller
	recorder *MockPartiesMockRecorder
}

// MockPartiesMockRecorder is the mock recorder for MockParties.
type MockPartiesMockRecorder struct {
	mock *MockParties
}

// NewMockParties creates a new mock instance.
func NewMockParties(ctrl *gomock.Controller) *MockParties {
	mock := &MockParties{ctrl: ctrl}
	mock.recorder = &MockPartiesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockParties) EXPECT() *MockPartiesMockRecorder {
	return m.recorder
}

// RelatedKeys mocks base method.
func (m *MockParties) RelatedKeys(arg0 string) (*types.PartyID, []string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RelatedKeys", arg0)
	ret0, _ := ret[0].(*types.PartyID)
	ret1, _ := ret[1].([]string)
	return ret0, ret1
}

// RelatedKeys indicates an expected call of RelatedKeys.
func (mr *MockPartiesMockRecorder) RelatedKeys(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RelatedKeys", reflect.TypeOf((*MockParties)(nil).RelatedKeys), arg0)
}

// MockStakeAccounting is a mock of StakeAccounting interface.
type MockStakeAccounting struct {
	ctrl     *gomock.Controller
	recorder *MockStakeAccountingMockRecorder
}

// MockStakeAccountingMockRecorder is the mock recorder for MockStakeAccounting.
type MockStakeAccountingMockRecorder struct {
	mock *MockStakeAccounting
}

// NewMockStakeAccounting creates a new mock instance.
func NewMockStakeAccounting(ctrl *gomock.Controller) *MockStakeAccounting {
	mock := &MockStakeAccounting{ctrl: ctrl}
	mock.recorder = &MockStakeAccountingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakeAccounting) EXPECT() *MockStakeAccountingMockRecorder {
	return m.recorder
}

// AddEvent mocks base method.
func (m *MockStakeAccounting) AddEvent(arg0 context.Context, arg1 *types.StakeLinking) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddEvent", arg0, arg1)
}

// AddEvent indicates an expected call of AddEvent.
func (mr *MockStakeAccountingMockRecorder) AddEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEvent", reflect.TypeOf((*MockStakeAccounting)(nil).AddEvent), arg0, arg1)
}

// MockTime is a mock of Time interface.
type MockTime struct {
	ctrl     *gomock.Controller
	recorder *MockTimeMockRecorder
}

// MockTimeMockRecorder is the mock recorder for MockTime.
type MockTimeMockRecorder struct {
	mock *MockTime
}

// NewMockTime creates a new mock instance.
func NewMockTime(ctrl *gomock.Controller) *MockTime {
	mock := &MockTime{ctrl: ctrl}
	mock.recorder = &MockTimeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTime) EXPECT() *MockTimeMockRecorder {
	return m.recorder
}

// GetTimeNow mocks base method.
func (m *MockTime) GetTimeNow() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeNow")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetTimeNow indicates an expected call of GetTimeNow.
func (mr *MockTimeMockRecorder) GetTimeNow() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeNow", reflect.TypeOf((*MockTime)(nil).GetTimeNow))
}
